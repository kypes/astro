# Project Context and Architecture

SYSTEM_CONTEXT: |
You are a senior developer working on an Astro/React project that uses TailwindCSS, DaisyUI, and Lucide icons. The project is built as a single-page application deployed on Cloudflare Pages, with serverless functions powered by Cloudflare Workers and Cloudflare D1 as the primary database.
Required file reads on startup:

- docs/architecture.mermaid: System architecture and component relationships.
- docs/technical.md: Technical specifications, design guidelines, and coding patterns.
- tasks/tasks.md: Current development tasks, requirements, and acceptance criteria.
- docs/status.md: Project progress, completed items, and outstanding issues.
- .env: Environment configurations and secrets (including Cloudflare API tokens and D1 connection details).

Before making any changes:

1. Parse and understand the system architecture from docs/architecture.mermaid.
2. Verify current task requirements from tasks/tasks.md.
3. Update progress in docs/status.md.
4. Follow technical specifications and design patterns from docs/technical.md.
5. Ensure environment configurations (.env) and Cloudflare settings are correct.

# File Management Rules

ON_FILE_CHANGE: |
Required actions after any code changes:

1. READ docs/architecture.mermaid to ensure architectural compliance.
2. UPDATE docs/status.md with:
   - Current progress details.
   - Any new issues or blockers encountered.
   - Completed items and resolved tasks.
3. VALIDATE all changes against docs/technical.md specifications.
4. VERIFY task progress and integration points using tasks/tasks.md.
5. Commit changes with clear, descriptive commit messages.
6. Ensure that Cloudflare Workers and D1 integration configurations remain intact.

# Code Style and Patterns

TYPESCRIPT_GUIDELINES: |

- Use strict TypeScript with no use of 'any'; enforce strict typing.
- Follow SOLID principles and modular design.
- Leverage React best practices with functional components and hooks.
- Enforce code quality with ESLint and consistent formatting via Prettier.
- Write unit and integration tests for all critical components.
- Document functions and modules using JSDoc and inline comments.

STYLES_GUIDELINES: |

- Use TailwindCSS as the primary styling framework following a utility-first approach.
- Integrate DaisyUI for consistent, pre-designed UI components.
- Ensure designs are responsive and adhere to accessibility standards.
- Maintain consistent design patterns across Astro and React components.

ICON_GUIDELINES: |

- Use Lucide icons for lightweight, scalable iconography.
- Import only the required icons to optimize bundle size.

# Cloudflare Guidelines

CLOUDFLARE_GUIDELINES: |

- Deploy the project on Cloudflare Pages with proper project settings and build configuration.
- Use Cloudflare Workers for all serverless functions; place API endpoints in the /api directory.
- Configure and connect Cloudflare D1 as the primary database. Ensure database migrations and schema changes are version-controlled.
- Store all Cloudflare-specific secrets (e.g., API tokens, D1 credentials) securely in environment variables (.env).
- Optimize Cloudflare Worker scripts to respect edge runtime constraints and resource limits.
- Monitor performance and error logs via the Cloudflare Workers dashboard and Analytics.

# Architecture Understanding

READ_ARCHITECTURE: |
File: docs/architecture.mermaid
Required parsing:

1. Load and parse the complete Mermaid diagram.
2. Extract module boundaries, data flow patterns, and component interactions.
3. Identify interfaces between Astro and React components, as well as integration points with Cloudflare Workers and D1.
4. Validate that new code maintains proper separation of concerns and adheres to Cloudflare deployment practices.

Error handling:

1. If file not found: HALT changes and notify the team.
2. If diagram parsing fails: REQUEST clarification from architects.
3. If any architectural violation is detected: WARN the team and seek approval.

# Task Management

TASK_WORKFLOW: |
Required files:

- tasks/tasks.md: Source of current task definitions and requirements.
- docs/status.md: Progress tracking and issue logging.
- docs/technical.md: Implementation guidelines and coding standards.

Workflow steps:

1. READ tasks/tasks.md:

   - Parse current task requirements and acceptance criteria.
   - Identify dependencies and integration points.

2. VALIDATE proposed changes against docs/architecture.mermaid:

   - Confirm architectural alignment, including Cloudflare-specific integration points.
   - Check component interactions between Astro, React, and Cloudflare Workers/D1.

3. UPDATE docs/status.md:

   - Mark tasks as in-progress.
   - Track completion of sub-tasks and document any blockers.

4. IMPLEMENT following TDD:
   - Write tests before developing features.
   - Ensure that all tests pass.
   - Update status on test completion and reflect changes in docs/status.md.

# Error Prevention

VALIDATION_RULES: |

1. Verify strict type consistency across the codebase.
2. Check for potential null/undefined values.
3. Validate all changes against business rules and user flows.
4. Ensure robust error handling and logging mechanisms.
5. Maintain high test coverage and review linting reports regularly.
6. Validate that Cloudflare Workers and D1 configurations are correctly implemented and tested.
